#include <Servo.h>

//Pins for the lights, the barrier and the tank.
const int barrier  = 10, grnLight = 2, redLight = 3,
          FW = 11, BW = 12;
//Barrier.
enum barrier_status_t { _closed, _open };
Servo s_barrier;
barrier_status_t current_status = _closed;
void open_barrier();
void close_barrier();

//Tank.
enum direction { _forward, _backword };  //Forward and backword.
//void tankFW(int);
Servo s_tank;
//void tankTurn(int);
void moveTank(direction d, int t);

void setup() {
    // put your setup code here, to run once:
    for(int i = 0; i <= 4; i++)
        pinMode(i, OUTPUT);
    s_barrier.attach(barrier);
    pinMode(FW, OUTPUT);
    pinMode(BW, OUTPUT);
}

void loop() {
    // put your main code here, to run repeatedly:
    /*1*/ open_barrier();
    /*2*/ moveTank(_forward, 5000);
    /*3*/ close_barrier();
    /*4*/ moveTank(_backword, 0);
    /*5*/ open_barrier();
    /*6*/ moveTank(_backword, 9000);
    /*7*/ close_barrier();
}

//Barrier.
void open_barrier() {
    if(current_status == _open)
        return;
    digitalWrite(grnLight, HIGH);
    digitalWrite(redLight, LOW);
    for(int i = 0; i < 90; i++) {
        s_barrier.write(i);
        delay(10);
    }
    current_status = _open;
}
void close_barrier() {
    if(current_status == _closed)
        return;
    digitalWrite(grnLight, LOW);
    digitalWrite(redLight, HIGH);
    for(int i = 89; i >= 0; i--) {
        s_barrier.write(i);
        delay(10);
    }
    current_status = _closed;
}
//Tank.
#if 0        //Disabled
void tankFW(int t) {
    digitalWrite(tank_mov, HIGH);
    delay(t);
    digitalWrite(tank_mov, LOW);
}
void tankTurn(int ang) {
    for(int i = 0; i < ang; i++) {
        s_tank.write(i);
        delay(10);
    }
}
#endif

void moveTank(direction d, int t) {
    if(d == FW) {
        digitalWrite(BW, LOW);
        digitalWrite(FW, HIGH);
        delay(t);
        digitalWrite(FW, LOW);
    }
    else {    //d == BW
        digitalWrite(FW, LOW);
        digitalWrite(BW, HIGH);
        delay(t);
        digitalWrite(BW, LOW);
    }
}
